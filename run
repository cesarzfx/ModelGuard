#!/usr/bin/env bash
set -euo pipefail

CMD="${1:-}"
shift || true

case "$CMD" in
  install)
    python3 -m pip install --upgrade pip
    pip3 install -r requirements.txt
    exit 0
    ;;

  test)
    # Robust pytest runner that always prints a stable summary
    TMP_OUT="$(mktemp)"
    PYTEST_STATUS=0

    # Ensure pytest present
    if ! python3 - <<'PY' >/dev/null 2>&1; then
import pytest  # noqa
PY
    then
      python3 -m pip install pytest pytest-cov
    fi

    # Run tests but still capture totals even if some fail
    pytest -q --cov=src --cov-branch --maxfail=999 \
      | tee "$TMP_OUT" || PYTEST_STATUS=$?

    # Parse "collected N items"
    TOTAL="$(grep -Eo 'collected[[:space:]][0-9]+[[:space:]]items?' "$TMP_OUT" \
      | awk '{print $2}' | tail -1)"
    TOTAL="${TOTAL:-0}"

    # Parse short summary line
    SUM="$(grep -E '(passed|failed|skipped)' "$TMP_OUT" | tail -1)"
    PASSED="$(echo "$SUM" | grep -Eo '[0-9]+ passed' | awk '{print $1}' | tail -1)"
    FAILED="$(echo "$SUM" | grep -Eo '[0-9]+ failed' | awk '{print $1}' | tail -1)"
    PASSED="${PASSED:-0}"
    FAILED="${FAILED:-0}"

    # Emit the exact summary lines the grader expects
    echo "TOTAL: ${TOTAL}"
    echo "PASSED: ${PASSED}"
    echo "FAILED: ${FAILED}"

    exit $PYTEST_STATUS
    ;;

  *)
    echo "Usage: ./run {install|test}"
    exit 2
    ;;
esac
